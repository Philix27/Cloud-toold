terminilogy:
  - services: DNS for pods within a worker node. Maps a consistent IP address to pods
  - ingress: Maps network from outside the cluster to a specific service. receives network from outside
  - control_plane: m
  - scheduler: m
install:
  - minikube
  - kubectl

start commands:
  - minikube #docs
  # this is a way of running k8 locally on a system
  - minikube start # to start a docker container of minikube
  - minikube status
  - minikube dashboard
  - minikube stop
  - minikube delete # delete cluster
  - minikube service {service_name}

# https://kubernetes.io/docs/reference/kubectl/cheatsheet/
whenMinikubeIsRunning:
  - get_pods:
      - kubectl get pods
      - kubectl get pods -o wide #  more info on pod
      - kubectl get pods -n {namespace} # deployment
  - get_node:
      - kubectl get nodes
  - get_svc:
      - kubectl get svc # services short
      - kubectl get service # services
  - get_deployment:
      - kubectl get deployment # deployment
      - kubectl get deployment -n {namespace} # deployment
      - kubectl get namespace
      - kubectl get replicaset # no of pods
  - create:
      - kubectl create deployment {custom_name} --image={image_url}
      - kubectl create namespace {name_of_choice}
  - describe:
      - kubectl describe deployment {image_name}
      - kubectl describe service {service_name}
  - edit:
      - kubectl edit deployment #opnes a notepad of deployment.yml
  - logs:
      - kubectl logs {pod_name} # logs of the pod
      - kubectl exec -it {pod_name} -- bin/bash
      - exit # to exit
  - delete:
      - kubectl delete deployment {deployment_name}
  - apply: #when applying a deployment file
      - kubectl apply -f {.\deploy.yaml}
      - kubectl apply -f {.\deploy.yaml} -n {namespace}
      - kubectl apply -f {.\deploy.yaml} --namespace={desired_namespace}
      - kubectl apply -f {.\svc.yaml}

kubeApi:
  - kubectl api-resources # List all the api resources
